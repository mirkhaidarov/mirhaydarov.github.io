{"version":3,"sources":["types/base-types.ts","utils/validate-rules.ts","features/registration/features/form/store/effects.ts","features/registration/features/form/store/events.ts","features/registration/features/form/store/index.ts","features/confirm-email/organisms/header/style.module.css","features/confirm-email/organisms/main/style.module.css","features/confirm-email/organisms/header/index.tsx","features/confirm-email/organisms/main/index.tsx","features/confirm-email/organisms/root/index.tsx"],"names":["MockUser","rules","userNameIsEmpty","name","validator","value","length","errorText","authentication","email","emailIsIncorrect","test","emailIsEmpty","passwordIsEmpty","password","redirectFx","createEffect","handler","history","push","Book","confirmEmail","provideHistory","createEvent","setUserName","form","createForm","fields","userName","init","promocode","validateOn","$userName","restore","togglePromocode","$isPromocode","createStore","on","_","payload","reset","merge","doneData","onRegistrationSuccessFx","guard","source","sample","$isValid","submit","filter","clock","target","$value","map","module","exports","Header","type","className","classes","button","Main","useStore","title","desc","goToEmail","to","root","emailNotCame","resendEmail","ConfirmEmail"],"mappings":"qGAAO,IAAKA,E,2CAAAA,K,4BAAAA,E,yBAAAA,M,KCGL,IAAMC,EAAQ,CACnBC,gBAAiB,iBAAqB,CACpCC,KAAM,WACNC,UAAW,SAACC,GAAD,OAA4B,IAAjBA,EAAMC,QAC5BC,UAAW,4DAEbC,eAAgB,iBAAqB,CACnCL,KAAM,iBACNC,UAAW,SAACC,GAAD,OAAWA,IAAUL,EAASS,OACzCF,UAAW,yHAEbE,MAAO,iBAAqB,CAC1BN,KAAM,QACNC,UAAW,SAACC,GAAD,OAAWA,IAAUL,EAASS,OACzCF,UAAW,mHAEbG,iBAAkB,iBAAqB,CACrCP,KAAM,QACNC,UAAW,SAACC,GAAD,MAAW,yCAAyCM,KAAKN,IACpEE,UAAW,6QAEbK,aAAc,iBAAqB,CACjCT,KAAM,aACNC,UAAW,SAACC,GAAD,OAA4B,IAAjBA,EAAMC,QAC5BC,UAAW,+CAEbM,gBAAiB,iBAAqB,CACpCV,KAAM,gBACNC,UAAW,SAACC,GAAD,OAA4B,IAAjBA,EAAMC,QAC5BC,UAAW,8EAEbO,SAAU,iBAAqB,CAC7BX,KAAM,WACNC,UAAW,SAACC,GAAD,OAAWA,IAAUL,EAASc,UACzCP,UAAW,qH,6OCjCFQ,EAAaC,YAAa,CACrCC,QADqC,SAC7BC,GACN,OAAOA,EAAQC,KAAKC,IAAKC,iBCHhBC,EAAiBC,cAEjBC,EAAcD,cCErBE,EAAOC,YAAW,CACtBC,OAAQ,CACNC,SAAU,CACRC,KAAM,GACN5B,MAAO,CAACA,IAAMC,oBAEhBO,MAAO,CACLoB,KAAM,GACN5B,MAAO,CAACA,IAAMW,eAAgBX,IAAMS,qBAEtCI,SAAU,CACRe,KAAM,GACN5B,MAAO,CAACA,IAAMY,oBAEhBiB,UAAW,CACTD,KAAM,KAGVE,WAAY,CAAC,YAGTC,EAAYC,YAAQT,EAAa,CAAEI,SAAU,KAE7CM,EAAkBX,cAElBY,EAAeC,aAAY,GAC9BC,GAAGH,GAAiB,SAACI,EAAGC,GAAJ,OAAgBA,KACpCC,MAAMC,YAAM,CAAChB,EAAKe,MAAOzB,EAAW2B,YAEjCC,EAA0BC,YAAM,CACpCC,OAAQC,YAAOrB,EAAKE,OAAOlB,MAAMsC,SAAUtB,EAAKuB,QAChDC,OAAQ,SAACV,GAAD,OAAaA,KAGvBO,YAAO,CACLD,OAAQvB,EACR4B,MAAOP,EACPQ,OAAQpC,IAGV+B,YAAO,CACLD,OAAQpB,EAAKE,OAAOC,SAASwB,OAAOC,KAAI,SAAAzB,GAAQ,MAAK,CAAEA,eACvDsB,MAAOnC,EAAW2B,SAClBS,OAAQ3B,K,mBCjDV8B,EAAOC,QAAU,CAAC,OAAS,wB,mBCA3BD,EAAOC,QAAU,CAAC,aAAe,4BAA4B,UAAY,2B,mHCE5DC,EAAS,WACpB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAQC,KAAK,SAASC,UAAWC,IAAQC,OAAzC,+C,gDCCOC,EAAO,WAAO,IACjBjC,EAAckC,YAAS9B,KAAvBJ,SAER,OACE,qBAAK8B,UAAU,OAAf,SACE,eAAC,IAAD,CACEK,MAAM,+FACNC,KAAI,UAAKpC,EAAL,qyBAFN,UAME,cAAC,IAAD,CAAM8B,UAAWC,IAAQM,UAAWC,GAAI9C,IAAK+C,KAA7C,8FAIA,cAAC,IAAD,CAAMT,UAAWC,IAAQS,aAAcF,GAAI9C,IAAKiD,YAAhD,6HClBKC,EAAe,kBAC1B,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD","file":"static/js/5.c4110d1f.chunk.js","sourcesContent":["export enum MockUser {\n  email = \"example@example.com\",\n  password = \"password2021\",\n}\n\nexport interface IUser {\n  userName: string;\n  email: string;\n  password: string;\n  promocode?: string | null;\n}\n","import { Rule } from \"effector-forms\";\nimport { MockUser } from \"../types/base-types\";\n\nexport const rules = {\n  userNameIsEmpty: (): Rule<string> => ({\n    name: \"userName\",\n    validator: (value) => value.length !== 0,\n    errorText: \"Ведите имя\",\n  }),\n  authentication: (): Rule<string> => ({\n    name: \"authentication\",\n    validator: (value) => value === MockUser.email,\n    errorText: \"Данный email не существует\",\n  }),\n  email: (): Rule<string> => ({\n    name: \"email\",\n    validator: (value) => value === MockUser.email,\n    errorText: \"Неверный email или пароль\",\n  }),\n  emailIsIncorrect: (): Rule<string> => ({\n    name: \"email\",\n    validator: (value) => /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(.com)+$/.test(value),\n    errorText: \"Возможно вы ошиблись в указании почтового индекса\",\n  }),\n  emailIsEmpty: (): Rule<string> => ({\n    name: \"emailEmpty\",\n    validator: (value) => value.length !== 0,\n    errorText: \"Ведите email\",\n  }),\n  passwordIsEmpty: (): Rule<string> => ({\n    name: \"passwordEmpty\",\n    validator: (value) => value.length !== 0,\n    errorText: \"Ведите пароль\",\n  }),\n  password: (): Rule<string> => ({\n    name: \"password\",\n    validator: (value) => value === MockUser.password,\n    errorText: \"Неверный email или пароль\",\n  }),\n};\n","import { createEffect } from \"effector\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Book } from \"../../../../../routes/book\";\r\n\r\nexport const redirectFx = createEffect({\r\n  handler(history: RouteComponentProps[\"history\"]) {\r\n    return history.push(Book.confirmEmail);\r\n  },\r\n});\r\n","import { createEvent } from \"effector\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\nexport const provideHistory = createEvent<RouteComponentProps[\"history\"]>()\r\n\r\nexport const setUserName = createEvent<{ userName: string }>()\r\n","import { createEvent, createStore, guard, merge, restore, sample } from \"effector\";\r\nimport { createForm } from \"effector-forms\";\r\nimport { IUser } from \"../../../../../types\";\r\nimport { rules } from \"../../../../../utils\";\r\nimport { redirectFx } from \"./effects\";\r\nimport { provideHistory, setUserName } from \"./events\";\r\n\r\nconst form = createForm({\r\n  fields: {\r\n    userName: {\r\n      init: \"\" as IUser[\"userName\"],\r\n      rules: [rules.userNameIsEmpty()],\r\n    },\r\n    email: {\r\n      init: \"\" as IUser[\"email\"],\r\n      rules: [rules.emailIsEmpty(), rules.emailIsIncorrect()],\r\n    },\r\n    password: {\r\n      init: \"\" as IUser[\"password\"],\r\n      rules: [rules.passwordIsEmpty()],\r\n    },\r\n    promocode: {\r\n      init: \"\" as IUser[\"promocode\"],\r\n    },\r\n  },\r\n  validateOn: [\"submit\"],\r\n});\r\n\r\nconst $userName = restore(setUserName, { userName: '' })\r\n\r\nconst togglePromocode = createEvent<boolean>();\r\n\r\nconst $isPromocode = createStore(false)\r\n  .on(togglePromocode, (_, payload) => payload)\r\n  .reset(merge([form.reset, redirectFx.doneData]));\r\n\r\nconst onRegistrationSuccessFx = guard({\r\n  source: sample(form.fields.email.$isValid, form.submit),\r\n  filter: (payload) => payload,\r\n});\r\n\r\nsample({\r\n  source: provideHistory,\r\n  clock: onRegistrationSuccessFx,\r\n  target: redirectFx,\r\n});\r\n\r\nsample({\r\n  source: form.fields.userName.$value.map(userName => ({ userName })),\r\n  clock: redirectFx.doneData,\r\n  target: setUserName\r\n})\r\n\r\nexport {\r\n  form,\r\n  $userName,\r\n  $isPromocode,\r\n  togglePromocode,\r\n  provideHistory\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"style_button__12JzP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emailNotCame\":\"style_emailNotCame__a0I9i\",\"goToEmail\":\"style_goToEmail__XsAko\"};","import { Button, Header as BaseHeader } from \"../../../ui\";\r\nimport classes from \"./style.module.css\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <BaseHeader>\r\n      <Button type=\"button\" className={classes.button}>\r\n        Выйти\r\n      </Button>\r\n    </BaseHeader>\r\n  );\r\n};\r\n","import { useStore } from \"effector-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Book } from \"../../../../routes/book\";\r\nimport { $userName } from \"../../../registration/features/form/store\";\r\nimport { Main as BaseMain } from \"../../../ui\";\r\nimport classes from \"./style.module.css\";\r\n\r\nexport const Main = () => {\r\n  const { userName } =  useStore($userName)\r\n\r\n  return (\r\n    <div className=\"wrap\">\r\n      <BaseMain\r\n        title=\"Подтвердите ваш e-mail\"\r\n        desc={`${userName}, на ваш E-mail отправлено письмо со ссылкой для\r\n        подтверждения. Перейдите по ней, чтобы активировать вашу учетную запись и получить\r\n        7 дней бесплатного доступа`}\r\n      >\r\n        <Link className={classes.goToEmail} to={Book.root}>\r\n          Перейти к почте\r\n        </Link>\r\n\r\n        <Link className={classes.emailNotCame} to={Book.resendEmail}>\r\n          Мне не пришло письмо\r\n        </Link>\r\n      </BaseMain>\r\n    </div>\r\n  );\r\n};\r\n","import { BaseTemplate } from \"../../../ui\";\r\nimport { Header } from \"../header\";\r\nimport { Main } from \"../main\";\r\n\r\nexport const ConfirmEmail = () => (\r\n  <BaseTemplate>\r\n    <Header />\r\n    <Main />\r\n  </BaseTemplate>\r\n);\r\n"],"sourceRoot":""}