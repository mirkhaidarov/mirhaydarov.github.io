{"version":3,"sources":["types/base-types.ts","utils/validate-rules.ts","features/login/features/form/store/effects.ts","features/login/features/form/store/events.ts","features/login/features/form/store/index.ts","features/login/features/form/organisms/root/style.module.css","features/login/organisms/main/style.module.css","features/login/organisms/header/index.tsx","features/login/features/form/organisms/fields/email-input/index.tsx","features/login/features/form/organisms/fields/password-input/index.tsx","features/login/features/form/organisms/root/index.tsx","features/login/organisms/main/index.tsx","features/login/organisms/root/index.tsx"],"names":["MockUser","rules","userNameIsEmpty","name","validator","value","length","errorText","authentication","email","emailIsIncorrect","test","emailIsEmpty","passwordIsEmpty","password","redirectFx","createEffect","handler","history","push","Book","welcome","setUserEmail","createEvent","provideHistory","form","createForm","fields","init","validateOn","$userEmail","restore","onLoginSuccessFx","guard","source","sample","$isValid","submit","filter","payload","clock","target","$value","map","module","exports","Header","linkDesc","linkTitle","linkTo","registration","EmailInput","useField","onChange","hasError","useForm","type","placeholder","className","e","PasswordInput","Form","eachValid","useHistory","console","log","errors","useEffect","reset","classes","onSubmit","preventDefault","button","disabled","Main","title","desc","descImg","descImgAlt","gap","passwordRestore","to","restorePassword","Login"],"mappings":"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","file":"static/js/6.b3ebe7be.chunk.js","sourcesContent":["export enum MockUser {\n  email = \"example@example.com\",\n  password = \"password2021\",\n}\n\nexport interface IUser {\n  userName: string;\n  email: string;\n  password: string;\n  promocode?: string | null;\n}\n","import { Rule } from \"effector-forms\";\nimport { MockUser } from \"../types/base-types\";\n\nexport const rules = {\n  userNameIsEmpty: (): Rule<string> => ({\n    name: \"userName\",\n    validator: (value) => value.length !== 0,\n    errorText: \"Ведите имя\",\n  }),\n  authentication: (): Rule<string> => ({\n    name: \"authentication\",\n    validator: (value) => value === MockUser.email,\n    errorText: \"Данный email не существует\",\n  }),\n  email: (): Rule<string> => ({\n    name: \"email\",\n    validator: (value) => value === MockUser.email,\n    errorText: \"Неверный email или пароль\",\n  }),\n  emailIsIncorrect: (): Rule<string> => ({\n    name: \"email\",\n    validator: (value) => /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(.com)+$/.test(value),\n    errorText: \"Возможно вы ошиблись в указании почтового индекса\",\n  }),\n  emailIsEmpty: (): Rule<string> => ({\n    name: \"emailEmpty\",\n    validator: (value) => value.length !== 0,\n    errorText: \"Ведите email\",\n  }),\n  passwordIsEmpty: (): Rule<string> => ({\n    name: \"passwordEmpty\",\n    validator: (value) => value.length !== 0,\n    errorText: \"Ведите пароль\",\n  }),\n  password: (): Rule<string> => ({\n    name: \"password\",\n    validator: (value) => value === MockUser.password,\n    errorText: \"Неверный email или пароль\",\n  }),\n};\n","import { createEffect } from \"effector\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Book } from \"../../../../../routes/book\";\r\n\r\nexport const redirectFx = createEffect({\r\n  handler(history: RouteComponentProps[\"history\"]) {\r\n    return history.push(Book.welcome);\r\n  },\r\n});\r\n","import { createEvent } from \"effector\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\nexport const setUserEmail = createEvent<{ email: string }>();\r\n\r\nexport const provideHistory = createEvent<RouteComponentProps[\"history\"]>()\r\n","import { guard, restore, sample } from \"effector\";\r\nimport { createForm } from \"effector-forms\";\r\nimport { IUser } from \"../../../../../types\";\r\nimport { rules } from \"../../../../../utils\";\r\nimport { redirectFx } from \"./effects\";\r\nimport { provideHistory, setUserEmail } from \"./events\";\r\n\r\nconst form = createForm({\r\n  fields: {\r\n    email: {\r\n      init: \"\" as IUser[\"email\"],\r\n      rules: [rules.emailIsEmpty(), rules.email()],\r\n    },\r\n    password: {\r\n      init: \"\" as IUser[\"password\"],\r\n      rules: [rules.passwordIsEmpty(), rules.password()],\r\n    },\r\n  },\r\n  validateOn: [\"submit\"],\r\n});\r\n\r\nconst $userEmail = restore(setUserEmail, { email: '' })\r\n\r\nconst onLoginSuccessFx = guard({\r\n  source: sample(form.$isValid, form.submit),\r\n  filter: (payload) => payload,\r\n});\r\n\r\nsample({\r\n  source: provideHistory,\r\n  clock: onLoginSuccessFx,\r\n  target: redirectFx,\r\n});\r\n\r\nsample({\r\n  source: form.fields.email.$value.map((email => ({ email }))),\r\n  clock: form.submit,\r\n  target: setUserEmail\r\n})\r\n\r\nexport {\r\n  form,\r\n  $userEmail,\r\n  provideHistory\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"style_form__2WfcJ\",\"button\":\"style_button__3shoU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"passwordRestore\":\"style_passwordRestore__a63ua\"};","import { Book } from \"../../../../routes/book\";\r\nimport { Header as BaseHeader } from \"../../../ui\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <BaseHeader\r\n      linkDesc=\"У вас нет аккаунта?\"\r\n      linkTitle=\"Регистрация\"\r\n      linkTo={Book.registration}\r\n    />\r\n  );\r\n};\r\n","import { useForm, useField } from \"effector-forms\";\r\nimport { form } from \"../../../store\";\r\nimport { Input } from \"../../../../../../ui\";\r\n\r\nexport const EmailInput = () => {\r\n  const { name, onChange } = useField(form.fields.email);\r\n  const { hasError } = useForm(form);\r\n\r\n  return (\r\n    <Input\r\n      type=\"text\"\r\n      placeholder=\"Email\"\r\n      className={hasError(\"email\") ? \"errorBorder\" : \"\"}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      name={name}\r\n    />\r\n  );\r\n};\r\n","import { useForm, useField } from \"effector-forms\";\r\nimport { form } from \"../../../store\";\r\nimport { Input } from \"../../../../../../ui\";\r\n\r\nexport const PasswordInput = () => {\r\n  const { name, onChange } = useField(form.fields.password);\r\n  const { hasError } = useForm(form);\r\n\r\n  return (\r\n    <Input\r\n      type=\"password\"\r\n      placeholder=\"Пароль\"\r\n      className={hasError(\"password\") ? \"errorBorder\" : \"\"}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      name={name}\r\n    />\r\n  );\r\n};\r\n","import { ChangeEvent, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useForm } from \"effector-forms\";\r\nimport { Button, FormErrors } from \"../../../../../ui\";\r\nimport { form, provideHistory } from \"../../store\";\r\nimport * as Fields from \"../fields\";\r\nimport classes from \"./style.module.css\";\r\n\r\nexport const Form = () => {\r\n  const { submit, errorText, eachValid } = useForm(form);\r\n  const history = useHistory();\r\n\r\n  console.log('errorText', errorText('email'), errorText('password'))\r\n\r\n  const errors = [errorText(\"email\"), errorText(\"password\")]\r\n\r\n  const onSubmit = (e: ChangeEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    submit();\r\n  };\r\n\r\n  useEffect(() => {\r\n    provideHistory(history);\r\n    return () => form.reset();\r\n  }, [history]);\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={onSubmit}>\r\n      <Fields.EmailInput />\r\n\r\n      <Fields.PasswordInput />\r\n\r\n      <FormErrors errors={errors} />\r\n\r\n      <Button className={classes.button} type=\"submit\" disabled={!eachValid}>\r\n        Войти в аккаунт\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n","import { Link } from \"react-router-dom\";\r\nimport { Book } from \"../../../../routes/book\";\r\nimport { Main as BaseMain } from \"../../../ui\";\r\nimport { Form } from \"../../features\";\r\nimport classes from \"./style.module.css\";\r\n\r\nexport const Main = () => {\r\n  return (\r\n    <div className=\"wrap\">\r\n      <BaseMain\r\n        authentication\r\n        title=\"Войти\"\r\n        desc=\"Добро пожаловать, рады видеть вас снова\"\r\n        descImg=\"waving-hand-emoji.png\"\r\n        descImgAlt=\"Waving Hand\"\r\n        gap=\"или\"\r\n      >\r\n        <Form />\r\n\r\n        <Link className={classes.passwordRestore} to={Book.restorePassword}>\r\n          Забыли пароль?\r\n        </Link>\r\n      </BaseMain>\r\n    </div>\r\n  );\r\n};\r\n","import { BaseTemplate } from \"../../../ui\";\r\nimport { Header } from \"../header\";\r\nimport { Main } from \"../main\";\r\n\r\nexport const Login = () => (\r\n  <BaseTemplate>\r\n    <Header />\r\n    <Main />\r\n  </BaseTemplate>\r\n);\r\n"],"sourceRoot":""}