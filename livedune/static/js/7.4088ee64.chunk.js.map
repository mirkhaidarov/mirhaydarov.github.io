{"version":3,"sources":["types/base-types.ts","utils/validate-rules.ts","features/registration/features/form/store/effects.ts","features/registration/features/form/store/events.ts","features/registration/features/form/store/index.ts","features/registration/features/form/organisms/root/style.module.css","features/registration/organisms/main/style.module.css","features/registration/organisms/header/index.tsx","features/registration/features/form/organisms/fields/email-input/index.tsx","features/registration/features/form/organisms/fields/user-name-input/index.tsx","features/registration/features/form/organisms/fields/password-input/index.tsx","features/registration/features/form/organisms/fields/promocode-input/index.tsx","features/registration/features/form/organisms/root/index.tsx","features/registration/organisms/main/index.tsx","features/registration/organisms/root/index.tsx"],"names":["MockUser","rules","userNameIsEmpty","name","validator","value","length","errorText","authentication","email","emailIsIncorrect","test","emailIsEmpty","passwordIsEmpty","password","redirectFx","createEffect","handler","history","push","Book","confirmEmail","provideHistory","createEvent","setUserName","form","createForm","fields","userName","init","promocode","validateOn","$userName","restore","togglePromocode","$isPromocode","createStore","on","_","payload","reset","merge","doneData","onRegistrationSuccessFx","guard","source","sample","$isValid","submit","filter","clock","target","$value","map","module","exports","Header","linkDesc","linkTitle","linkTo","root","EmailInput","useField","onChange","hasError","useForm","type","placeholder","className","classes","errorBorder","e","UserNameInput","PasswordInput","PromocodeInput","Form","eachValid","isPromocode","useStore","useHistory","errors","useEffect","onSubmit","preventDefault","checked","button","disabled","Main","title","desc","gap","offers","offersLink","to","Registration"],"mappings":"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","file":"static/js/7.4088ee64.chunk.js","sourcesContent":["export enum MockUser {\n  email = \"example@example.com\",\n  password = \"password2021\",\n}\n\nexport interface IUser {\n  userName: string;\n  email: string;\n  password: string;\n  promocode?: string | null;\n}\n","import { Rule } from \"effector-forms\";\nimport { MockUser } from \"../types/base-types\";\n\nexport const rules = {\n  userNameIsEmpty: (): Rule<string> => ({\n    name: \"userName\",\n    validator: (value) => value.length !== 0,\n    errorText: \"Ведите имя\",\n  }),\n  authentication: (): Rule<string> => ({\n    name: \"authentication\",\n    validator: (value) => value === MockUser.email,\n    errorText: \"Данный email не существует\",\n  }),\n  email: (): Rule<string> => ({\n    name: \"email\",\n    validator: (value) => value === MockUser.email,\n    errorText: \"Неверный email или пароль\",\n  }),\n  emailIsIncorrect: (): Rule<string> => ({\n    name: \"email\",\n    validator: (value) => /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(.com)+$/.test(value),\n    errorText: \"Возможно вы ошиблись в указании почтового индекса\",\n  }),\n  emailIsEmpty: (): Rule<string> => ({\n    name: \"emailEmpty\",\n    validator: (value) => value.length !== 0,\n    errorText: \"Ведите email\",\n  }),\n  passwordIsEmpty: (): Rule<string> => ({\n    name: \"passwordEmpty\",\n    validator: (value) => value.length !== 0,\n    errorText: \"Ведите пароль\",\n  }),\n  password: (): Rule<string> => ({\n    name: \"password\",\n    validator: (value) => value === MockUser.password,\n    errorText: \"Неверный email или пароль\",\n  }),\n};\n","import { createEffect } from \"effector\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Book } from \"../../../../../routes/book\";\r\n\r\nexport const redirectFx = createEffect({\r\n  handler(history: RouteComponentProps[\"history\"]) {\r\n    return history.push(Book.confirmEmail);\r\n  },\r\n});\r\n","import { createEvent } from \"effector\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\nexport const provideHistory = createEvent<RouteComponentProps[\"history\"]>()\r\n\r\nexport const setUserName = createEvent<{ userName: string }>()\r\n","import { createEvent, createStore, guard, merge, restore, sample } from \"effector\";\r\nimport { createForm } from \"effector-forms\";\r\nimport { IUser } from \"../../../../../types\";\r\nimport { rules } from \"../../../../../utils\";\r\nimport { redirectFx } from \"./effects\";\r\nimport { provideHistory, setUserName } from \"./events\";\r\n\r\nconst form = createForm({\r\n  fields: {\r\n    userName: {\r\n      init: \"\" as IUser[\"userName\"],\r\n      rules: [rules.userNameIsEmpty()],\r\n    },\r\n    email: {\r\n      init: \"\" as IUser[\"email\"],\r\n      rules: [rules.emailIsEmpty(), rules.emailIsIncorrect()],\r\n    },\r\n    password: {\r\n      init: \"\" as IUser[\"password\"],\r\n      rules: [rules.passwordIsEmpty()],\r\n    },\r\n    promocode: {\r\n      init: \"\" as IUser[\"promocode\"],\r\n    },\r\n  },\r\n  validateOn: [\"submit\"],\r\n});\r\n\r\nconst $userName = restore(setUserName, { userName: '' })\r\n\r\nconst togglePromocode = createEvent<boolean>();\r\n\r\nconst $isPromocode = createStore(false)\r\n  .on(togglePromocode, (_, payload) => payload)\r\n  .reset(merge([form.reset, redirectFx.doneData]));\r\n\r\nconst onRegistrationSuccessFx = guard({\r\n  source: sample(form.fields.email.$isValid, form.submit),\r\n  filter: (payload) => payload,\r\n});\r\n\r\nsample({\r\n  source: provideHistory,\r\n  clock: onRegistrationSuccessFx,\r\n  target: redirectFx,\r\n});\r\n\r\nsample({\r\n  source: form.fields.userName.$value.map(userName => ({ userName })),\r\n  clock: redirectFx.doneData,\r\n  target: setUserName\r\n})\r\n\r\nexport {\r\n  form,\r\n  $userName,\r\n  $isPromocode,\r\n  togglePromocode,\r\n  provideHistory\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"style_form__32QEE\",\"button\":\"style_button__hccHq\",\"promocode\":\"style_promocode__16s6P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"offers\":\"style_offers__2Z8Ea\",\"offersLink\":\"style_offersLink__IcVHu\"};","import { Book } from '../../../../routes/book'\r\nimport { Header as BaseHeader } from '../../../ui'\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <BaseHeader\r\n      linkDesc=\"Уже есть аккаунт?\"\r\n      linkTitle=\"Войти\"\r\n      linkTo={Book.root}\r\n    />\r\n  )\r\n}\r\n","import { useForm, useField } from \"effector-forms\";\r\nimport { form } from \"../../../store\";\r\nimport { Input } from \"../../../../../../ui\";\r\nimport classes from \"../../root/style.module.css\";\r\n\r\nexport const EmailInput = () => {\r\n  const { name, onChange } = useField(form.fields.email);\r\n  const { hasError } = useForm(form);\r\n\r\n  return (\r\n    <Input\r\n      type=\"text\"\r\n      placeholder=\"Email\"\r\n      className={hasError(\"email\") ? classes.errorBorder : \"\"}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      name={name}\r\n    />\r\n  );\r\n};\r\n","import { useForm, useField } from \"effector-forms\";\r\nimport { form } from \"../../../store\";\r\nimport { Input } from \"../../../../../../ui\";\r\nimport classes from \"../../root/style.module.css\";\r\n\r\nexport const UserNameInput = () => {\r\n  const { name, onChange } = useField(form.fields.userName);\r\n  const { hasError } = useForm(form);\r\n\r\n  return (\r\n    <Input\r\n      type=\"text\"\r\n      placeholder=\"Имя\"\r\n      className={hasError(\"userName\") ? classes.errorBorder : \"\"}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      name={name}\r\n    />\r\n  );\r\n};\r\n","import { useForm, useField } from \"effector-forms\";\r\nimport { form } from \"../../../store\";\r\nimport { Input } from \"../../../../../../ui\";\r\nimport classes from \"../../root/style.module.css\";\r\n\r\nexport const PasswordInput = () => {\r\n  const { name, onChange } = useField(form.fields.password);\r\n  const { hasError } = useForm(form);\r\n\r\n  return (\r\n    <Input\r\n      type=\"password\"\r\n      placeholder=\"Пароль\"\r\n      className={hasError(\"password\") ? classes.errorBorder : \"\"}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      name={name}\r\n    />\r\n  );\r\n};\r\n","import { useField } from \"effector-forms\";\r\nimport { form } from \"../../../store\";\r\nimport { Input } from \"../../../../../../ui\";\r\n\r\nexport const PromocodeInput = () => {\r\n  const { name, onChange } = useField(form.fields.promocode);\r\n\r\n  return (\r\n    <Input\r\n      type=\"text\"\r\n      placeholder=\"Промокод\"\r\n      onChange={(e) => onChange(e.target.value)}\r\n      name={name}\r\n    />\r\n  );\r\n};\r\n","import { ChangeEvent, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStore } from \"effector-react\";\r\nimport { useForm } from \"effector-forms\";\r\nimport { Button, FormErrors } from \"../../../../../ui\";\r\nimport { $isPromocode, form, togglePromocode, provideHistory } from \"../../store\";\r\nimport * as Fields from \"../fields\";\r\nimport classes from \"./style.module.css\";\r\n\r\nexport const Form = () => {\r\n  const { submit, errorText, eachValid } = useForm(form);\r\n  const isPromocode = useStore($isPromocode);\r\n  const history = useHistory()\r\n\r\n  const errors = [\r\n    errorText(\"userName\"),\r\n    errorText(\"email\"),\r\n    errorText(\"password\"),\r\n  ];\r\n\r\n  const onSubmit = (e: ChangeEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    provideHistory(history)\r\n    submit();\r\n  };\r\n\r\n  const onChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\r\n    togglePromocode(target.checked);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => form.reset();\r\n  }, []);\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={onSubmit}>\r\n      <Fields.UserNameInput />\r\n\r\n      <Fields.EmailInput />\r\n\r\n      <Fields.PasswordInput />\r\n\r\n      {isPromocode && <Fields.PromocodeInput />}\r\n\r\n      <FormErrors errors={errors} />\r\n\r\n      {!isPromocode && (\r\n        <label className={classes.promocode}>\r\n          <input type=\"checkbox\" onChange={onChange} />У меня есть промокод\r\n        </label>\r\n      )}\r\n\r\n      <Button className={classes.button} type=\"submit\" disabled={!eachValid}>\r\n        Создать аккаунт\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n","import { Link } from 'react-router-dom'\r\nimport { Book } from '../../../../routes/book'\r\nimport { Main as BaseMain } from '../../../ui'\r\nimport { Form } from '../../features'\r\nimport classes from './style.module.css'\r\n\r\nexport const Main = () => {\r\n  return (\r\n    <div className=\"wrap\">\r\n      <BaseMain\r\n        authentication\r\n        title=\"Регистрация\"\r\n        desc=\"Зарегистрируйся и получи доступ к аналитике аккаунтов.\"\r\n        gap=\"или\"\r\n      >\r\n        <Form />\r\n\r\n        <p className={classes.offers}>\r\n          Создавая аккаунт, я согласен с\r\n          <Link\r\n            className={classes.offersLink}\r\n            to={Book.root}\r\n          >\r\n            &nbsp;условиями оферты\r\n          </Link>\r\n        </p>\r\n      </BaseMain>\r\n    </div>\r\n  )\r\n}\r\n","import { BaseTemplate } from '../../../ui'\r\nimport { Header } from '../header'\r\nimport { Main } from '../main'\r\n\r\nexport const Registration = () => {\r\n  return (\r\n    <BaseTemplate>\r\n      <Header />\r\n      <Main />\r\n    </BaseTemplate>\r\n  )\r\n}\r\n"],"sourceRoot":""}