{"version":3,"sources":["types/base-types.ts","utils/validate-rules.ts","features/login/features/form/store/effects.ts","features/login/features/form/store/events.ts","features/login/features/form/store/index.ts","features/welcome/organisms/root/style.module.css","features/welcome/organisms/root/index.tsx"],"names":["MockUser","rules","userNameIsEmpty","name","validator","value","length","errorText","authentication","email","emailIsIncorrect","test","emailIsEmpty","passwordIsEmpty","password","redirectFx","createEffect","handler","history","push","Book","welcome","setUserEmail","createEvent","provideHistory","form","createForm","fields","init","validateOn","$userEmail","restore","onLoginSuccessFx","guard","source","sample","$isValid","submit","filter","payload","clock","target","$value","map","module","exports","Welcome","useStore","className","classes","wrap","linkToRoot","to","root"],"mappings":"qGAAO,IAAKA,E,2CAAAA,K,4BAAAA,E,yBAAAA,M,KCGL,IAAMC,EAAQ,CACnBC,gBAAiB,iBAAqB,CACpCC,KAAM,WACNC,UAAW,SAACC,GAAD,OAA4B,IAAjBA,EAAMC,QAC5BC,UAAW,4DAEbC,eAAgB,iBAAqB,CACnCL,KAAM,iBACNC,UAAW,SAACC,GAAD,OAAWA,IAAUL,EAASS,OACzCF,UAAW,yHAEbE,MAAO,iBAAqB,CAC1BN,KAAM,QACNC,UAAW,SAACC,GAAD,OAAWA,IAAUL,EAASS,OACzCF,UAAW,mHAEbG,iBAAkB,iBAAqB,CACrCP,KAAM,QACNC,UAAW,SAACC,GAAD,MAAW,yCAAyCM,KAAKN,IACpEE,UAAW,6QAEbK,aAAc,iBAAqB,CACjCT,KAAM,aACNC,UAAW,SAACC,GAAD,OAA4B,IAAjBA,EAAMC,QAC5BC,UAAW,+CAEbM,gBAAiB,iBAAqB,CACpCV,KAAM,gBACNC,UAAW,SAACC,GAAD,OAA4B,IAAjBA,EAAMC,QAC5BC,UAAW,8EAEbO,SAAU,iBAAqB,CAC7BX,KAAM,WACNC,UAAW,SAACC,GAAD,OAAWA,IAAUL,EAASc,UACzCP,UAAW,qH,yKCjCFQ,EAAaC,YAAa,CACrCC,QADqC,SAC7BC,GACN,OAAOA,EAAQC,KAAKC,IAAKC,YCHhBC,EAAeC,cAEfC,EAAiBD,cCExBE,EAAOC,YAAW,CACtBC,OAAQ,CACNlB,MAAO,CACLmB,KAAM,GACN3B,MAAO,CAACA,IAAMW,eAAgBX,IAAMQ,UAEtCK,SAAU,CACRc,KAAM,GACN3B,MAAO,CAACA,IAAMY,kBAAmBZ,IAAMa,cAG3Ce,WAAY,CAAC,YAGTC,EAAaC,YAAQT,EAAc,CAAEb,MAAO,KAE5CuB,EAAmBC,YAAM,CAC7BC,OAAQC,YAAOV,EAAKW,SAAUX,EAAKY,QACnCC,OAAQ,SAACC,GAAD,OAAaA,KAGvBJ,YAAO,CACLD,OAAQV,EACRgB,MAAOR,EACPS,OAAQ1B,IAGVoB,YAAO,CACLD,OAAQT,EAAKE,OAAOlB,MAAMiC,OAAOC,KAAK,SAAAlC,GAAK,MAAK,CAAEA,YAClD+B,MAAOf,EAAKY,OACZI,OAAQnB,K,mBCpCVsB,EAAOC,QAAU,CAAC,KAAO,oBAAoB,WAAa,4B,0ICK7CC,EAAU,WAAO,IACpBrC,EAAUsC,YAASjB,KAAnBrB,MAER,OACE,sBAAKuC,UAAWC,IAAQC,KAAxB,UACE,8HAEA,6BAAKzC,IAEL,cAAC,IAAD,CAAMuC,UAAWC,IAAQE,WAAYC,GAAIhC,IAAKiC,KAA9C","file":"static/js/9.f6b6d7e1.chunk.js","sourcesContent":["export enum MockUser {\n  email = \"example@example.com\",\n  password = \"password2021\",\n}\n\nexport interface IUser {\n  userName: string;\n  email: string;\n  password: string;\n  promocode?: string | null;\n}\n","import { Rule } from \"effector-forms\";\nimport { MockUser } from \"../types/base-types\";\n\nexport const rules = {\n  userNameIsEmpty: (): Rule<string> => ({\n    name: \"userName\",\n    validator: (value) => value.length !== 0,\n    errorText: \"Ведите имя\",\n  }),\n  authentication: (): Rule<string> => ({\n    name: \"authentication\",\n    validator: (value) => value === MockUser.email,\n    errorText: \"Данный email не существует\",\n  }),\n  email: (): Rule<string> => ({\n    name: \"email\",\n    validator: (value) => value === MockUser.email,\n    errorText: \"Неверный email или пароль\",\n  }),\n  emailIsIncorrect: (): Rule<string> => ({\n    name: \"email\",\n    validator: (value) => /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(.com)+$/.test(value),\n    errorText: \"Возможно вы ошиблись в указании почтового индекса\",\n  }),\n  emailIsEmpty: (): Rule<string> => ({\n    name: \"emailEmpty\",\n    validator: (value) => value.length !== 0,\n    errorText: \"Ведите email\",\n  }),\n  passwordIsEmpty: (): Rule<string> => ({\n    name: \"passwordEmpty\",\n    validator: (value) => value.length !== 0,\n    errorText: \"Ведите пароль\",\n  }),\n  password: (): Rule<string> => ({\n    name: \"password\",\n    validator: (value) => value === MockUser.password,\n    errorText: \"Неверный email или пароль\",\n  }),\n};\n","import { createEffect } from \"effector\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Book } from \"../../../../../routes/book\";\r\n\r\nexport const redirectFx = createEffect({\r\n  handler(history: RouteComponentProps[\"history\"]) {\r\n    return history.push(Book.welcome);\r\n  },\r\n});\r\n","import { createEvent } from \"effector\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\nexport const setUserEmail = createEvent<{ email: string }>();\r\n\r\nexport const provideHistory = createEvent<RouteComponentProps[\"history\"]>()\r\n","import { guard, restore, sample } from \"effector\";\r\nimport { createForm } from \"effector-forms\";\r\nimport { IUser } from \"../../../../../types\";\r\nimport { rules } from \"../../../../../utils\";\r\nimport { redirectFx } from \"./effects\";\r\nimport { provideHistory, setUserEmail } from \"./events\";\r\n\r\nconst form = createForm({\r\n  fields: {\r\n    email: {\r\n      init: \"\" as IUser[\"email\"],\r\n      rules: [rules.emailIsEmpty(), rules.email()],\r\n    },\r\n    password: {\r\n      init: \"\" as IUser[\"password\"],\r\n      rules: [rules.passwordIsEmpty(), rules.password()],\r\n    },\r\n  },\r\n  validateOn: [\"submit\"],\r\n});\r\n\r\nconst $userEmail = restore(setUserEmail, { email: '' })\r\n\r\nconst onLoginSuccessFx = guard({\r\n  source: sample(form.$isValid, form.submit),\r\n  filter: (payload) => payload,\r\n});\r\n\r\nsample({\r\n  source: provideHistory,\r\n  clock: onLoginSuccessFx,\r\n  target: redirectFx,\r\n});\r\n\r\nsample({\r\n  source: form.fields.email.$value.map((email => ({ email }))),\r\n  clock: form.submit,\r\n  target: setUserEmail\r\n})\r\n\r\nexport {\r\n  form,\r\n  $userEmail,\r\n  provideHistory\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"style_wrap__1SNnk\",\"linkToRoot\":\"style_linkToRoot__jGy0S\"};","import { Link } from \"react-router-dom\";\r\nimport { useStore } from \"effector-react\";\r\nimport { Book } from \"../../../../routes/book\";\r\nimport { $userEmail } from \"../../../login/features/form/store\";\r\nimport classes from \"./style.module.css\";\r\n\r\nexport const Welcome = () => {\r\n  const { email } = useStore($userEmail)\r\n\r\n  return (\r\n    <div className={classes.wrap}>\r\n      <h1>Добро пожаловать!</h1>\r\n\r\n      <h3>{email}</h3>\r\n\r\n      <Link className={classes.linkToRoot} to={Book.root}>\r\n        Вернуться назад\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n"],"sourceRoot":""}